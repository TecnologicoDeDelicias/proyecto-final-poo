/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    // id 'com.diffplug.spotless' version 'latest.release'

    id 'checkstyle'

    id 'pmd'

    id 'jacoco'

    id 'info.solidsoft.pitest' version 'latest.release'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:32.1.1-jre'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'mx.tecnm.delicias.poo.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}
/*
spotless {
    java {
        googleJavaFormat()
    }
}
*/
checkstyle {
    toolVersion = '10.12.5' // started failing using 10.12.6
    configFile = file('config/checkstyle/google-style.xml')
}

pmd {
    consoleOutput = true
    toolVersion = "6.55.0" // TODO: Update to PMD 7 when Gradle fix is applied: https://github.com/gradle/gradle/pull/27247
    ruleSetFiles = files("config/pmd/pmd-global.xml")
    ignoreFailures = true
}

pmdMain {
    ruleSetFiles = files("config/pmd/pmd-global.xml", "config/pmd/pmd-main.xml")
}

jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification
    reports {
		xml.required = true
	}
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
				'**/Exercise*', 
                '**/Main*',
			])
        }))
    }
}

jacoco {
    toolVersion = "latest.release"
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                'mx.tecnm.delicias.*.exercises.exercise*.Exercise*', 
                'mx.tecnm.delicias.*.exercises.exercise*.Main', 
                'mx.tecnm.delicias.poo.unit5.exercises.exercise2.PropagateExceptionExample',
                'mx.tecnm.delicias.poo.unit5.exam.Calculator',
                'mx.tecnm.delicias.poo.unit5.exam.DivisionByZero',

            ]
            limit {
                counter = 'LINE'
                minimum = 0.8
            }
        }
    }
}

pitest {
    targetClasses = ['mx.tecnm.delicias.poo.*']
    excludedClasses = [
        'mx.tecnm.delicias.poo.App', 
        'mx.tecnm.delicias.*.exercises.exercise*.Exercise*', 
        'mx.tecnm.delicias.*.exercises.exercise*.Main*'
    ]
    pitestVersion = 'latest.release'
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    junit5PluginVersion = '1.0.0'
    mutationThreshold = 70
    verbose = false
    withHistory = true
    mutators = ['ALL']
}
